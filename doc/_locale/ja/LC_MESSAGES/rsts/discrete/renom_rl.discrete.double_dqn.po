# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, grid
# This file is distributed under the same license as the ReNomRL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ReNomRL 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-31 10:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../rsts/discrete/renom_rl.discrete.double_dqn.rst:2
msgid "renom_rl.discrete.double_dqn"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:1
msgid "Bases: :class:`renom_rl.AgentBase`"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:1
msgid ""
"Double DQN class This class provides a reinforcement learning agent "
"including training method."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:4
msgid "Environment. This must be a child class of BaseEnv."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:6
msgid "Q-Network."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:8
msgid "Loss function for train q-network. Default is ClippedMeanSquaredError()."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:10
msgid "Optimizer for train q-network. Default is Rmsprop(lr=0.00025, g=0.95)."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:11
msgid "Discount rate."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:13
msgid "The size of replay buffer."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:18
#: renom_rl.discrete.double_dqn.DoubleDQN.fit:35
msgid "Example"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:36
msgid "References"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:37
msgid "Hado van Hasselt, Arthur Guez, David Silver"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:38
msgid "**Deep Reinforcement Learning with Double Q-learning**"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN:39
msgid "https://arxiv.org/abs/1509.06461"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.initialize:1
msgid ""
"Target q-network is initialized with same neural network weights of "
"q-network."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.action:1
msgid "This method returns an action according to the given state."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.action:3
msgid "A state of an environment."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.action:7
msgid "Action."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.update:1
msgid "This function updates target network."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.update_best_q_network:1
msgid "This function updates best network in each epoch."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:1
msgid ""
"This method executes training of a q-network. Training will be done with "
"epsilon-greedy method(default)."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:4
msgid "You can define following callback functions."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:6
msgid "- end_epoch"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:7
msgid "Args:"
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:8
msgid "epoch (int): The number of current epoch."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:9
msgid "model (DQN): Object of DQN which is on training."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:10
msgid ""
"summed_train_reward_in_current_epoch (float): Sum of train rewards earned"
" in current epoch."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:11
msgid "summed_test_reward_in_current_epoch (float): Sum of test rewards."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:12
msgid ""
"average_train_loss_in_current_epoch (float): Average train loss in "
"current epoch."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:15
msgid "Number of epoch for training."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:17
msgid "Number of step of one epoch."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:19
msgid "Batch size."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:21
msgid "Number of random step which will be executed before training."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:23
msgid "Number of test step."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:25
msgid "Period of updating target network."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:27
msgid "For the learning step, training is done at this cycle."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.fit:29
msgid "Exploration filter during learning. Default is `EpsilonGreedyFilter`."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.test:1
msgid "Test the trained agent."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.test:3
msgid ""
"Number of steps (not episodes) for test. If None is given, this method "
"tests execute only 1 episode."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.test:5
msgid ""
"Exploartion filter during test. Default is "
"`ConstantFilter(threshold=1.0)`."
msgstr ""

#: of renom_rl.discrete.double_dqn.DoubleDQN.test:9
msgid "Sum of rewards."
msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr "戻り値"

#~ msgid "Return type"
#~ msgstr "戻り値の型"

#~ msgid "Bases: :class:`renom_rl.AgentBase`"
#~ msgstr ""

#~ msgid ""
#~ "Double DQN class This class provides "
#~ "a reinforcement learning agent including "
#~ "training method."
#~ msgstr "Double Deep Q Learning(DQN) 強化学習エージェント. "

#~ msgid "Environment. This must be a child class of BaseEnv."
#~ msgstr "エージェントを訓練させる環境. 環境オブジェクトはReNomRLが提供するBaseEnvクラスの子クラスである必要がある."

#~ msgid "Q-Network."
#~ msgstr ""

#~ msgid ""
#~ "Loss function for train q-network. "
#~ "Default is ClippedMeanSquaredError()."
#~ msgstr "Q-networkを訓練させるための誤差関数. デフォルトでは, ClippedMeanSquaredError()."

#~ msgid "Optimizer for train q-network. Default is Rmsprop(lr=0.00025, g=0.95)."
#~ msgstr "Q-networkを学習させるための勾配降下手法. デフォルトでは, Rmsprop(lr=0.00025, g=0.95)."

#~ msgid "Discount rate."
#~ msgstr "割引率"

#~ msgid "The size of replay buffer."
#~ msgstr "Experience Replay Bufferのサイズ."

#~ msgid "Example"
#~ msgstr ""

#~ msgid "References"
#~ msgstr ""

#~ msgid "Hado van Hasselt, Arthur Guez, David Silver"
#~ msgstr ""

#~ msgid "**Deep Reinforcement Learning with Double Q-learning**"
#~ msgstr ""

#~ msgid "https://arxiv.org/abs/1509.06461"
#~ msgstr ""

#~ msgid ""
#~ "Target q-network is initialized with "
#~ "same neural network weights of "
#~ "q-network."
#~ msgstr "Target Q-networkをQ-networkと同じ重みパラメータで初期化する."

#~ msgid "This method returns an action according to the given state."
#~ msgstr "与えられた状態(state)に応じた行動を返す."

#~ msgid "A state of an environment."
#~ msgstr "環境の状態."

#~ msgid "Action."
#~ msgstr "行動"

#~ msgid "This function updates target network."
#~ msgstr "環境の状態."

#~ msgid "This function updates best network in each epoch."
#~ msgstr "それぞれのTarget Q-network更新期間において, 最も高い報酬を獲得したQ-networkを更新する."

#~ msgid ""
#~ "This method executes training of a "
#~ "q-network. Training will be done with"
#~ " epsilon-greedy method."
#~ msgstr "Q-Networkの学習を実行する関数. 学習はe-greedy法に基づいて行われる."

#~ msgid "You can define following callback functions."
#~ msgstr ""
#~ "fit関数には, 以下のようなコールバック関数を定義することができる.下に示すExampleのように, "
#~ "デコレータを用いてコールバックを実装できる."

#~ msgid "- end_epoch"
#~ msgstr ""

#~ msgid "Args:"
#~ msgstr ""

#~ msgid "epoch (int): The number of current epoch."
#~ msgstr "epoch (int): 現在のepoch番号."

#~ msgid "model (DQN): Object of DQN which is on training."
#~ msgstr "model (DQN): 現在学習中のDQNオブジェクト."

#~ msgid ""
#~ "summed_train_reward_in_current_epoch (float): Sum of"
#~ " train rewards earned in current "
#~ "epoch."
#~ msgstr "summed_train_reward_in_current_epoch (float): 現在のepochにおいて得られた報酬の総和."

#~ msgid "summed_test_reward_in_current_epoch (float): Sum of test rewards."
#~ msgstr "summed_test_reward_in_current_epoch (float): Test時に獲得した報酬の総和."

#~ msgid ""
#~ "average_train_loss_in_current_epoch (float): Average "
#~ "train loss in current epoch."
#~ msgstr "average_train_loss_in_current_epoch (float): 現在のepochにおける学習誤差の平均."

#~ msgid "Number of epoch for training."
#~ msgstr "学習するepoch数."

#~ msgid "Number of step of one epoch."
#~ msgstr "それぞれのepochで実行するstep数."

#~ msgid "Batch size."
#~ msgstr "バッチサイズ."

#~ msgid "Number of random step which will be executed before training."
#~ msgstr "学習前に, ランダムに経験を獲得するstep数."

#~ msgid "Number of test step."
#~ msgstr "Test時に実行するstep数"

#~ msgid "Period of updating target network."
#~ msgstr "Target Networkを更新する頻度."

#~ msgid "For the learning step, training is done at this cycle."
#~ msgstr "Q-networkを学習する頻度."

#~ msgid "Minimum greedy value"
#~ msgstr "Greedy値の最小値."

#~ msgid "Maximum greedy value"
#~ msgstr "Greedy値の最大値."

#~ msgid "Number of step"
#~ msgstr "Greedyを最小から最大まで増加させるまでのstep数"

#~ msgid "Greedy threshold"
#~ msgstr "Test時に使用するGreedy値."

#~ msgid "If True is given, BaseEnv.render() method will be called in test time."
#~ msgstr "Trueが与えられた場合, BaseEnv.render()メソッドが実行される."

#~ msgid "Test the trained agent."
#~ msgstr "エージェントをテストを実行するメソッド."

#~ msgid ""
#~ "Number of steps for test. If None"
#~ " is given, this method tests just "
#~ "1 episode."
#~ msgstr "Test時に実行するstep数. Noneが与えられた場合, 1episode分のTestが実行される."

#~ msgid "Greedy ratio of action."
#~ msgstr ""
#~ "与えられた割合(greedy)に応じて, 学習した価値関数, 方策に基づいて行動する. (1 "
#~ "- greedy)に応じて, 行動をランダムに選択する."

#~ msgid "If True is given, BaseEnv.render() method will be called."
#~ msgstr "Trueが与えられた時, BaseEnv.render()メソッドが呼ばれます."

#~ msgid "Sum of rewards."
#~ msgstr "獲得報酬の総和"

